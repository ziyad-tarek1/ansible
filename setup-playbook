---
- name: Setup and Install Packages
  hosts: localhost
  become: yes

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install necessary dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - conntrack
          - zip
        state: present

    - name: Install Docker dependencies
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Add Docker GPG key
      ansible.builtin.command: >
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg |
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Install Ansible
      apt:
        name: ansible
        state: present

    - name: Install kubectl
      get_url:
        url: "https://dl.k8s.io/release/{{ lookup('url', 'https://dl.k8s.io/release/stable.txt') }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'

    - name: Install Minikube
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'

    - name: Start Minikube with Docker driver
      command: minikube start --driver=docker

    - name: Install Java
      apt:
        name: openjdk-17-jdk
        state: present

    - name: Add Jenkins GPG key
      ansible.builtin.command: >
        curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key |
        tee /usr/share/keyrings/jenkins-keyring.asc
      args:
        creates: /usr/share/keyrings/jenkins-keyring.asc

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        state: present

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Enable Jenkins service
      systemd:
        name: jenkins
        enabled: yes
        state: started

    - name: Install Terraform GPG key
      ansible.builtin.command: |
        wget -O- https://apt.releases.hashicorp.com/gpg |
        gpg --dearmor |
        tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/hashicorp-archive-keyring.gpg

    - name: Add Terraform repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_lsb.codename }} main"
        state: present

    - name: Install Terraform
      apt:
        name: terraform
        state: present

    - name: Install AWS CLI
      apt:
        name: unzip
        state: present

    - name: Download AWS CLI
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp/
        remote_src: yes

    - name: Install AWS CLI
      command: /tmp/aws/install

    - name: Install eksctl
      get_url:
        url: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_{{ ansible_system }}_amd64.tar.gz"
        dest: /tmp/eksctl.tar.gz

    - name: Extract and install eksctl
      unarchive:
        src: /tmp/eksctl.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move eksctl to bin
      command: mv /tmp/eksctl /usr/local/bin

    - name: Install Helm
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install NGINX, Apache, Git, GitHub CLI, and htop
      apt:
        name:
          - nginx
          - apache2
          - git
          - gh
          - htop
        state: present

    - name: Pull Trivy Docker image
      docker_image:
        name: aquasec/trivy
        source: pull

    - name: Pull SonarQube Docker image
      docker_image:
        name: sonarqube:community
        source: pull

    - name: Run SonarQube container
      docker_container:
        name: sonarqube
        image: sonarqube:community
        state: started
        ports:
          - "9000:9000"
        volumes:
          - sonarqube_conf:/opt/sonarqube/conf
          - sonarqube_data:/opt/sonarqube/data
          - sonarqube_logs:/opt/sonarqube/logs
          - sonarqube_extensions:/opt/sonarqube/extensions
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"

  handlers:
    - name: Reboot the system
      reboot:
        msg: "Rebooting the system after installations."
